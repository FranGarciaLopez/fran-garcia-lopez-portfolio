---
import type { GetStaticPaths } from "astro";
import projectData from "../../../../data/projects.json";
import ProjectFeatures from "../../../../components/ProjectsFeatures.astro";
import Layout from "../../../../layouts/Layout.astro";
import BentoGrid from "../../../../components/BentoGrid.astro";
import TestingDetails from "../../../../components/TestingDetails.astro";
import TelegramBotSimulation from "../../../../components/TelegramBotSimulation.astro";

export const getStaticPaths: GetStaticPaths = async () => {
  const locales = ["es", "en"];
  return projectData.projects.flatMap((project) =>
    locales.map((lang) => ({
      params: { lang, id: project.id.toString() },
      props: { project, lang },
    }))
  );
};

interface AlgorithmFeature {
  description: string;
  benefits?: string[];
  steps?: string[];
}

interface Project {
  id: number;
  name: { en: string; es: string };
  description: { en: { text: string }[]; es: { text: string }[] };
  role: { en: string; es: string };
  institution: string | { en: string; es: string };
  timeframe: { en: string; es: string };
  github_repositories?: string[];
  url: string;
  images: string[];
  algorithm_features: {
    titles: { en: string; es: string };
    en: Record<string, string>;
    es: Record<string, string>;
  };
  end_to_end_testing_with_vitest: {
    en: { description: { text: string }[] };
    es: { description: { text: string }[] };
  };
}

const { project, lang } = Astro.props as {
  project: Project;
  lang: "en" | "es";
};

const repositories = project.github_repositories || [];
---

<Layout title={`Project | ${project.name[lang]}`} lang={lang}>
  <head>
    <title>{project.name} - Fran García López</title>
    <meta
      name="description"
      content={project.description[lang].map((d) => d.text).join(" ")}
    />
    <link
      rel="canonical"
      href={`https://fran-garcia-lopez.com/${lang}/projects/${project.id}/`}
    />
  </head>

  <section
    class="relative min-h-screen bg-[#222428] text-white
    px-4 md:px-8 lg:px-10
    py-8 md:py-12 lg:py-16"
  >
    <div class="max-w-7xl mx-auto">
      <!-- Botón Volver -->
      <button
        type="button"
        class="text-[#eae0d5] rounded-2xl py-2 px-2 hover:bg-[#c2b280] hover:text-black transition-all duration-300 flex items-center"
        onclick="window.history.back()"
      >
        <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 20 20">
          <path
            fill-rule="evenodd"
            d="M7.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l2.293 2.293a1 1 0 010 1.414z"
            clip-rule="evenodd"></path>
        </svg>
      </button>

      <!-- Título del Proyecto -->
      <h1
        class="text-3xl md:text-7xl lg:text-5xl font-semibold tracking-wide text-[#f5f5dc] uppercase mt-6"
      >
        {project.name[lang]}
      </h1>

      <div class="mt-6 grid grid-cols-1 md:grid-cols-2 gap-4">
        <!-- Botón de Ver Proyecto -->
        {
          project.url && (
            <a
              href={project.url}
              class="inline-block text-black font-bold bg-[#eae0d5] text-lg rounded-lg hover:bg-[#c2b280] transition-all duration-300 py-4 px-6 text-center w-full"
            >
              {lang === "es" ? "Ver el Proyecto" : "Check the Project"}
            </a>
          )
        }

        <!-- Repositorios GitHub -->
        {
          repositories.length > 0 && (
            <div class="grid grid-cols-1 gap-4 w-full">
              {repositories.map((repoUrl) => {
                // Extract repository name from URL
                const repoName = repoUrl.split("/").pop();
                return (
                  <a
                    href={repoUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="inline-block text-black font-bold bg-[#eae0d5] text-lg rounded-lg hover:bg-[#c2b280] transition-all duration-300 py-4 px-6 text-center flex items-center justify-center w-full"
                  >
                    <svg
                      class="w-6 h-6 mr-2"
                      fill="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z" />
                    </svg>
                    {repoName}
                  </a>
                );
              })}
            </div>
          )
        }
      </div>

      <!-- Descripción -->
      <div
        class="mt-6 text-lg md:text-2xl lg:text-xl text-[#eae0d5] leading-relaxed"
      >
        {
          project.description[lang].map((descObj) => (
            <p class="py-4 md:py-6">{descObj.text}</p>
          ))
        }
      </div>

      {
        project.id === 2 && (
          <div class="mt-12">
            <h2
              class="
              text-xl sm:text-3xl md:text-4xl lg:text-5xl
              mt-10 md:mt-12 md:mb-6
              font-serif leading-tight tracking-wide text-[#f5f5dc] uppercase text-start
            "
            >
              {lang === "es"
                ? "Simulación de Bot de Telegram"
                : "Telegram Bot Simulation"}
            </h2>
            <TelegramBotSimulation lang={lang} />
          </div>
        )
      }

      <!-- Imágenes -->
      {
        project.id !== 2 && (
          <BentoGrid project_images={project.images} class="mt-12" />
        )
      }

      <!-- Características del Algoritmo -->
      {
        project.algorithm_features && (
          <div class="mt-12">
            <h2
              class="
              text-xl sm:text-3xl md:text-4xl lg:text-5xl
              mt-10 md:mt-12 md:mb-6
              font-serif leading-tight tracking-wide text-[#f5f5dc] uppercase text-start
            "
            >
              {project.algorithm_features.titles[lang]}
            </h2>
            <ProjectFeatures
              algorithm_features={project.algorithm_features[lang]}
            />
          </div>
        )
      }

      <!-- Testing Details -->
      <TestingDetails
        testingDetails={project.end_to_end_testing_with_vitest?.[lang]}
        lang={lang}
      />

      <!-- Detalles Adicionales -->
      <div class="text-[#c2b280] md:text-xl mt-2">
        <p class="text-lg mx-2">
          <strong class="text-[#f5f5dc] text-lg">
            {lang === "es" ? "Rol:" : "Role:"}
          </strong>
          {project.role[lang]}
        </p>
        <p class="text-lg mt-4 mx-2">
          <strong class="text-[#f5f5dc] text-lg">
            {lang === "es" ? "Institución:" : "Institution:"}
          </strong>
          {
            typeof project.institution === "string" ? (
              project.institution.includes("MiduDev") ? (
                <span class="text-[#0099ff] font-bold text-lg ml-2 mx-2">
                  {lang === "es"
                    ? "Inspirado en el tutorial de MiduDev"
                    : "Inspired by MiduDev's tutorial"}
                </span>
              ) : (
                <span class="text-[#fcb700] text-lg ml-2 mx-2">
                  {project.institution}
                </span>
              )
            ) : (
              <span class="text-[#0099ff] text-lg ml-2 mx-2">
                {project.institution[lang]}
              </span>
            )
          }
        </p>
        <p class="text-lg mt-4 mx-2">
          <strong class="text-[#f5f5dc] text-lg">
            {lang === "es" ? "Período de tiempo:" : "Timeframe:"}
          </strong>
          {project.timeframe[lang]}
        </p>
      </div>
    </div>
  </section>
</Layout>

<script>
  document.addEventListener("astro:page-load", () => {
    const projectLoader = document.getElementById("project-loader");
    const projectContent = document.getElementById("project-content");

    // Si hay un loader, lo ocultamos al cargar
    if (document.readyState === "complete") {
      if (projectLoader && projectContent) {
        projectLoader.style.display = "none";
        projectContent.style.opacity = "1";
      }
    } else {
      window.addEventListener("load", () => {
        if (projectLoader && projectContent) {
          projectLoader.style.display = "none";
          projectContent.style.opacity = "1";
        }
      });
    }
  });
</script>
