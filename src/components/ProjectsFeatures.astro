---
interface AlgorithmFeature {
  features: [
    {
      description: string;
      benefits?: string[];
      steps?: string[];
    },
  ];
}

interface AlgorithmFeatures {
  [key: string]: AlgorithmFeature | { es: string; en: string };
}

const { algorithm_features } = Astro.props as {
  algorithm_features: AlgorithmFeatures;
};
---

<div class="w-full
    max-w-7xl
    mx-auto
    mt-6
    md:mt-8
    space-y-10">
  {
    Object.entries(algorithm_features).map(([key, feature]) => (
      <div
        class="
          border border-[#4448]
          p-6 md:p-10
          rounded-xl bg-[#1a1c1e]
          transition-all duration-500
          hover:scale-105 hover:shadow-2xl
          hover:bg-gradient-to-t from-[#2c2f36] via-[#3c4049] to-[#4a4e58]
        "
      >
        <h3
          class="
            text-2xl md:text-3xl lg:text-4xl
            font-serif
            tracking-wide
            text-[#f5f5dc]
            capitalize
            mb-4
          "
        >
          {key.replace(/_/g, " ")}
        </h3>

        <p class="text-lg md:text-xl text-[#a1a1aa] leading-relaxed mt-2">
          {feature.description}
        </p>

        {feature.benefits && (
          <ul class="list-disc list-inside text-[#c2b280] mt-4 space-y-3">
            {feature.benefits.map((benefit) => (
              <li class="leading-relaxed text-lg md:text-xl">{benefit}</li>
            ))}
          </ul>
        )}

        {feature.steps && (
          <ul class="list-disc list-inside text-[#c2b280] mt-4 space-y-3">
            {feature.steps.map((step) => (
              <li class="leading-relaxed text-lg md:text-xl">{step}</li>
            ))}
          </ul>
        )}
      </div>
    ))
  }
</div>
